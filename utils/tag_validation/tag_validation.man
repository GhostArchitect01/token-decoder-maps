NAME
    Tag Validation Scripts - A suite of tools for TDM tag ontology validation.
    Version 1.0.20251020

OVERVIEW
    This suite contains three Python scripts designed to work together to parse the TDM tag ontology, clean up tag fields in token files, and validate a library of tokens against the ontology.

TDM PROTOCOL WORKFLOW
    The official, recommended, and safest method for refactoring tags is to use the TDM protocol, which orchestrates the scripts below.

    1. ::SY-TAG-REFACTOR-ORCHESTRATOR::
       - This is the master token that triggers the entire workflow.

    2. ::FX-RUN-TAG-VALIDATION::
       - This token is called by the orchestrator and encapsulates the execution of the `validate_tags.py` script, providing a report of non-conforming files.

    3. ::FX-SAFE-TAG-REFACTOR::
       - This token is called for each non-conforming file. It contains the core logic to analyze tags and generate a safe replacement, ensuring no other part of the file is touched.

SCRIPTS

    1. parse_ontology.py
       - PURPOSE: Reads the master `Tag_ontology.md` file, which is formatted with tab-based indentation, and produces a flat, alphabetized list of all valid, fully-qualified tags.
       - USAGE: This script is primarily intended to be used as a module by other scripts. It can be run standalone for debugging purposes.
       - COMMAND: `python parse_ontology.py <path_to_ontology_file>`

    2. delint_tags.py
       - PURPOSE: A utility script to clean and standardize token files. It scans a directory of files and removes any commas (`,`) from the `- **Tags:**` line, ensuring all tags are space-separated.
       - USAGE: Run this script on a directory of token files before running the main validation script to prevent formatting errors.
       - COMMAND: `python delint_tags.py '<glob_pattern>'`
       - EXAMPLE: `python delint_tags.py 'Tdm-library/**/*.md'`

    3. validate_tags.py
       - PURPOSE: The main validation script. It scans a directory of token files, compares each file's tags against the master ontology list (generated by `parse_ontology.py`), and generates a detailed report of all non-conforming files and tags.
       - USAGE: Use this script to get a comprehensive audit of your token library's tag conformance.
       - COMMAND: `python validate_tags.py '<glob_pattern>' <path_to_ontology_file>`
       - EXAMPLE: `python validate_tags.py 'Tdm-library/**/*.md' 'Tdm-library/Tag_ontology.md'`
